# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KvwinSGxOxvLMqk3-97XabBziPF3LIaU
"""

import streamlit as st
import tensorflow as tf
from PIL import Image, ImageOps
import numpy as np
import cv2
import io

# Load the trained model
model = tf.keras.models.load_model('best_model.h5')

# Define class names corresponding to the model's output classes
class_names = ['cataract', 'diabetic_retinopathy', 'glaucoma', 'normal']

# Function to preprocess an image
def preprocess_image(image):
    image = cv2.resize(image, (32, 32))
    image = image / 255.0  # Normalize pixel values to [0, 1]
    return image

# Function to make predictions
def predict(image):
    # Preprocess the image
    preprocessed_image = preprocess_image(image)
    # Perform prediction
    prediction = model.predict(np.expand_dims(preprocessed_image, axis=0))
    return prediction[0]

# Streamlit app
st.title("Eye Disease Detection System")

# File uploader
uploaded_file = st.file_uploader("Choose an image...", type=["jpg", "jpeg", "png"])

# Process uploaded image and make predictions
if uploaded_file is not None:
    # Read the uploaded image
    image = Image.open(uploaded_file)
    st.image(image, caption='Uploaded Image', use_column_width=True)

    # Convert the image to a numpy array
    img_array = np.array(image)

    # Make prediction
    prediction = predict(img_array)

    # Check if the maximum confidence level is below a certain threshold
    threshold = 0.5  # You can adjust this threshold as needed
    if np.max(prediction) < threshold:
        st.write("The image provided is not recognizable to the system.")
    else:
        # Display prediction results
        st.write("## Prediction Results:")
        for i, class_name in enumerate(class_names):
            st.write(f"- {class_name}: {prediction[i]*100:.2f}%")

# Instructions
st.write("Upload an image to predict the likelihood of various eye diseases.")
